import TelegramBot from 'node-telegram-bot-api';
import { storage } from './storage';

let bot: TelegramBot | null = null;

export function initializeTelegramBot() {
  if (!process.env.TELEGRAM_BOT_TOKEN) {
    console.log('TELEGRAM_BOT_TOKEN not found, skipping Telegram bot initialization');
    return null;
  }

  try {
    bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
    
    bot.on('message', async (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from?.id;
      const username = msg.from?.username || msg.from?.first_name || `User${userId}`;

      if (!userId) return;

      try {
        // Check if user exists
        let user = await storage.getUserByTelegramId(userId.toString());
        
        if (!user) {
          // Create new user
          user = await storage.createUser({
            telegramId: userId.toString(),
            username: username,
            firstName: msg.from?.first_name || null,
            lastName: msg.from?.last_name || null,
            avatar: Math.floor(Math.random() * 4).toString()
          });
        }

        if (msg.text === '/start') {
          const welcomeText = `
üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Couple Games!

–≠—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä —Å –¥–≤—É–º—è —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∏–≥—Ä–∞–º–∏:

üíï **–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ** - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
üéØ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è** - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —Å–æ–≤–ø–∞–¥–∞–µ—Ç–µ

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
          `;

          await bot!.sendMessage(chatId, welcomeText, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                    web_app: {
                      url: `${process.env.REPLIT_DEV_DOMAIN || 'https://your-app-domain.replit.app'}`
                    }
                  }
                ]
              ]
            }
          });
        } else if (msg.text === '/help') {
          const helpText = `
‚ùì **–ü–æ–º–æ—â—å –ø–æ Couple Games**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä

**–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**
1. –ù–∞–π–¥–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É (–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ / –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
3. –ò–≥—Ä–∞–π—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ!

**–ò–≥—Ä—ã:**
üéÆ **–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ** - –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è
üéØ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è** - –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º
          `;

          await bot!.sendMessage(chatId, helpText);
        } else if (msg.text === '/profile') {
          const profileText = `
üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

üÜî ID: #${user.id}
üìù –ò–º—è: ${user.username}
üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: ${user.gamesPlayed}
üéØ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${user.syncScore}%
${user.partnerId ? `üíï –ü–∞—Ä—Ç–Ω–µ—Ä: –°–≤—è–∑–∞–Ω` : 'üíî –ü–∞—Ä—Ç–Ω–µ—Ä: –ù–µ –Ω–∞–π–¥–µ–Ω'}

–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!
          `;

          await bot!.sendMessage(chatId, profileText, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üìä –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
                    web_app: {
                      url: `${process.env.REPLIT_DEV_DOMAIN || 'https://your-app-domain.replit.app'}/profile`
                    }
                  }
                ]
              ]
            }
          });
        } else {
          // Default response with app button
          await bot!.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Couple Games:', {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É',
                    web_app: {
                      url: `${process.env.REPLIT_DEV_DOMAIN || 'https://your-app-domain.replit.app'}`
                    }
                  }
                ]
              ]
            }
          });
        }
      } catch (error) {
        console.error('Error handling Telegram message:', error);
        await bot!.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });

    bot.on('web_app_data', async (msg) => {
      const chatId = msg.chat.id;
      const userId = msg.from?.id;
      const data = JSON.parse(msg.web_app_data!.data);

      console.log('Web App data received:', data);

      // Handle different types of web app data
      if (data.type === 'game_completed') {
        await bot!.sendMessage(chatId, `üéâ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${data.score} –æ—á–∫–æ–≤`);
      }
    });

    console.log('‚úÖ Telegram bot initialized successfully');
    return bot;
  } catch (error) {
    console.error('‚ùå Failed to initialize Telegram bot:', error);
    return null;
  }
}

export function getTelegramBot() {
  return bot;
}